{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mac OS Installation\n",
    "\n",
    "Mac OS installation is broken up into two categories. The first is for end user installation and the second is for development."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## End User Installation\n",
    "\n",
    "The majority of users will want to simply install the binary distribution of the library. This can be accomplished using pip. If we do not have a binary wheel for your operating system, you must follow the development installation guide.\n",
    "\n",
    "```bash\n",
    "pip install matrixprofile\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Development Installation\n",
    "\n",
    "Due to our usage of Cython and OpenMP for some modules, you are required to use homebrew's C compiler gcc. Mac OS decided to drop support for OpenMP requiring manual installation of it. This development installation will walk you through the preferred way to get set up for development."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install Homebrew\n",
    "\n",
    "Homebrew is required to install gcc, llvm and openmp. Go to the [homebrew website](https://brew.sh) and install homebrew. In most cases it will automatically prompt you to install XCode Command Line Tools. If it does not, please install it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install Anaconda\n",
    "\n",
    "Anaconda has become the defacto Python distribution for scientific computing and is highly recommended. You may use a base installation of Python without it, but this document does not cover that use case.\n",
    "\n",
    "Download the command line installer of Anaconda from the [Anaconda website](https://www.anaconda.com/distribution/).\n",
    "\n",
    "Open a terminal and execute the installer. If you are using the latest Mac OS (as of December 2019) Catalina, Anaconda does not automatically create a ZSH entry (the default shell). However, it does create an entry in your .bash_profile. To always load Anaconda environment when you launch a shell, run the following in a terminal:\n",
    "\n",
    "Note that all commands assume you installed Anaconda in your home directory.\n",
    "\n",
    "```\n",
    "source ~/.bash_profile\n",
    "conda init zsh\n",
    "```\n",
    "\n",
    "Conda will now load the (base) environment when you launch a terminal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install C Libraries\n",
    "\n",
    "In this section you will install llvm, libomp and gcc via homebrew.\n",
    "\n",
    "```\n",
    "brew install llvm libomp gcc\n",
    "```\n",
    "\n",
    "Once this is finished we need to create a symlink to the gcc version installed. This way it will be found when Cython tries to compile the Cython modules. Note that you should change {version} to the version of gcc that you installed.\n",
    "\n",
    "```\n",
    "ln -s /usr/local/bin/gcc-{version} /usr/local/bin/gcc\n",
    "```\n",
    "\n",
    "We also need to add some entries to our .zshrc file so that openmp can be found. Copy and paste the following lines into your ~/.zshrc file.\n",
    "\n",
    "```\n",
    "export PATH=\"/usr/local/opt/llvm/bin:$PATH\"\n",
    "export LDFLAGS=\"-L/usr/local/opt/llvm/lib\"\n",
    "export CPPFLAGS=\"-I/usr/local/opt/llvm/include\"\n",
    "```\n",
    "\n",
    "Once this is complete, we can keep using the same terminal by simply sourcing the .zshrc file.\n",
    "\n",
    "```\n",
    "source ~/.zshrc\n",
    "```\n",
    "\n",
    "To verify that openmp is working properly with gcc, we can create a simple C application. Create a file named \"omptest.c\" with the following code:\n",
    "\n",
    "```c\n",
    "#include <stdlib.h>\n",
    "#include <stdio.h>\n",
    "#include <omp.h>\n",
    "\n",
    "int main() {\n",
    "  #pragma omp parallel num_threads(4)\n",
    "  {\n",
    "    printf(\"Hello from thread %d, nthreads %d\\n\", omp_get_thread_num(), omp_get_num_threads());\n",
    "  }\n",
    "  return EXIT_SUCCESS;\n",
    "}\n",
    "```\n",
    "\n",
    "Now we can compile and run the application.\n",
    "\n",
    "```\n",
    "gcc -fopenmp omptest.c -o omptest\n",
    "./omptest\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install matrixprofile for Development\n",
    "\n",
    "Finally, we can clone the matrixprofile source code and install it in development mode. If you wish, you may create a new Anaconda environment for this. Please refer to the [Anaconda documentation](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands) to create a conda environment.\n",
    "\n",
    "When I clone source code, I tend to favor putting all source files in a \"src\" directory within my home directory. Please substitute to suite your development preferences.\n",
    "\n",
    "```\n",
    "mkdir ~/src\n",
    "cd ~/src\n",
    "git clone https://github.com/matrix-profile-foundation/matrixprofile.git\n",
    "cd matrixprofile\n",
    "\n",
    "# for python 3.x\n",
    "pip install -r requirements.txt\n",
    "\n",
    "# for python 2.x\n",
    "pip install -r python2-requirements.txt\n",
    "\n",
    "pip install -e .\n",
    "```\n",
    "\n",
    "Once the installation completes, you can try running the tests to verify everything is OK.\n",
    "\n",
    "```\n",
    "pytest tests/\n",
    "```\n",
    "\n",
    "Please refer to our contribution guidelines for details on what we expect. Happy coding!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
